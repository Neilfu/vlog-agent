version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: chinese-ai-postgres
    environment:
      POSTGRES_DB: video_creator
      POSTGRES_USER: video_user
      POSTGRES_PASSWORD: video_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - chinese-ai-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U video_user -d video_creator"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: chinese-ai-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - chinese-ai-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    container_name: chinese-ai-backend
    environment:
      - DEBUG=true
      - DATABASE_URL=postgresql://video_user:video_password@postgres:5432/video_creator
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET_KEY=your-super-secret-jwt-key-change-this-in-production
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}
      - VOLC_ACCESS_KEY=${VOLC_ACCESS_KEY}
      - VOLC_SECRET_KEY=${VOLC_SECRET_KEY}
      - OSS_ACCESS_KEY=${OSS_ACCESS_KEY}
      - OSS_SECRET_KEY=${OSS_SECRET_KEY}
      - WECHAT_APP_ID=${WECHAT_APP_ID}
      - WECHAT_APP_SECRET=${WECHAT_APP_SECRET}
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - chinese-ai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Strapi CMS
  strapi:
    build:
      context: .
      dockerfile: docker/Dockerfile.strapi
    container_name: chinese-ai-strapi
    environment:
      - DATABASE_CLIENT=postgres
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_NAME=strapi_video
      - DATABASE_USERNAME=strapi
      - DATABASE_PASSWORD=strapi_password
      - JWT_SECRET=your-strapi-jwt-secret
      - ADMIN_JWT_SECRET=your-strapi-admin-jwt-secret
    ports:
      - "1337:1337"
    volumes:
      - ./strapi:/app
      - strapi_uploads:/app/public/uploads
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - chinese-ai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:1337/admin"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend React App
  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend
    container_name: chinese-ai-frontend
    environment:
      - REACT_APP_API_URL=http://backend:8000/v1
      - REACT_APP_WEBSOCKET_URL=ws://backend:8000/ws
      - REACT_APP_CDN_URL=https://your-cdn-domain.com
      - REACT_APP_OSS_URL=https://your-bucket.oss-cn-beijing.aliyuncs.com
      - REACT_APP_WECHAT_APP_ID=${WECHAT_APP_ID}
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - chinese-ai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: chinese-ai-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - backend
      - frontend
      - strapi
    networks:
      - chinese-ai-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: chinese-ai-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - chinese-ai-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: chinese-ai-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - chinese-ai-network

  # Redis Insight (Optional - for Redis monitoring)
  redis-insight:
    image: redislabs/redisinsight:latest
    container_name: chinese-ai-redis-insight
    ports:
      - "8001:8001"
    volumes:
      - redis_insight_data:/db
    depends_on:
      - redis
    networks:
      - chinese-ai-network

networks:
  chinese-ai-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  strapi_uploads:
  prometheus_data:
  grafana_data:
  redis_insight_data: