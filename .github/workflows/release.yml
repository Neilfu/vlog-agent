name: Release

on:
  push:
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog from git commits
        git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD > CHANGELOG.md
        echo "CHANGELOG<<EOF" >> $GITHUB_ENV
        cat CHANGELOG.md >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          ## üéâ What's New / Êñ∞ÂäüËÉΩ

          ${{ env.CHANGELOG }}

          ## üì¶ Docker Images

          Backend: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.ref_name }}`
          Frontend: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.ref_name }}`

          ## üöÄ Deployment

          See [deployment guide](https://github.com/${{ github.repository }}/blob/main/docs/DEPLOYMENT.md) for instructions.

          ## üìö Documentation

          - [API Documentation](https://github.com/${{ github.repository }}/blob/main/docs/API.md)
          - [Architecture Guide](https://github.com/${{ github.repository }}/blob/main/docs/ARCHITECTURE.md)
          - [Development Guide](https://github.com/${{ github.repository }}/blob/main/docs/DEVELOPMENT.md)
        draft: false
        prerelease: false

  build-and-push-docker:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: create-release
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (backend)
      id: meta-backend
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Extract metadata (frontend)
      id: meta-frontend
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push backend Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        file: ./docker/Dockerfile.backend
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        file: ./docker/Dockerfile.frontend
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  update-documentation:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: create-release

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Update API documentation
      run: |
        # Generate API documentation
        cd backend
        pip install -r requirements.txt
        pip install pdoc3
        pdoc --html --output-dir ../docs/api app

    - name: Update changelog
      run: |
        # Update CHANGELOG.md with new release
        echo "## ${{ github.ref_name }} - $(date +'%Y-%m-%d')" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> CHANGELOG.md
        echo "" >> CHANGELOG.md

    - name: Commit documentation changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add docs/ CHANGELOG.md
        git commit -m "Update documentation for ${{ github.ref_name }}" || exit 0
        git push

  deploy-to-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push-docker, update-documentation]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Deploy to production
      run: |
        echo "Deploying version ${{ github.ref_name }} to production..."
        # Add production deployment logic here
        # This could involve:
        # - Updating Kubernetes deployments
        # - Running database migrations
        # - Updating load balancer configurations
        # - Running health checks

    - name: Verify deployment
      run: |
        echo "Verifying production deployment..."
        # Add verification logic here
        # This should verify that:
        # - All services are running
        # - Health checks pass
        # - API endpoints are accessible
        # - Database connections work

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [create-release, deploy-to-production]
    if: always()

    steps:
    - name: Notify on success
      if: needs.deploy-to-production.result == 'success'
      run: |
        echo "Release ${{ github.ref_name }} deployed successfully! üéâ"
        # Add success notification logic here
        # This could include:
        # - Slack notifications
        # - Email notifications
        # - Discord notifications
        # - SMS notifications for critical releases

    - name: Notify on failure
      if: needs.deploy-to-production.result == 'failure'
      run: |
        echo "Release ${{ github.ref_name }} deployment failed! ‚ùå"
        # Add failure notification logic here
        # This should alert the team about the failed deployment
        # and provide information about what went wrong

  create-release-artifacts:
    name: Create Release Artifacts
    runs-on: ubuntu-latest
    needs: create-release

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Create source code archive
      run: |
        tar -czf chinese-ai-video-system-${{ github.ref_name }}.tar.gz \
          --exclude='.git' \
          --exclude='node_modules' \
          --exclude='__pycache__' \
          --exclude='.pytest_cache' \
          --exclude='.env' \
          --exclude='*.log' \
          .

    - name: Upload release artifact
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./chinese-ai-video-system-${{ github.ref_name }}.tar.gz
        asset_name: chinese-ai-video-system-${{ github.ref_name }}.tar.gz
        asset_content_type: application/gzip

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-to-production, notify-release]
    if: always()

    steps:
    - name: Cleanup temporary files
      run: |
        echo "Cleaning up temporary files..."
        # Add cleanup logic here
        # This should remove any temporary files or resources
        # that were created during the release process

    - name: Update deployment metrics
      run: |
        echo "Updating deployment metrics..."
        # Add metrics update logic here
        # This could include:
        # - Deployment frequency
        # - Lead time for changes
        # - Time to restore service
        # - Change failure rate